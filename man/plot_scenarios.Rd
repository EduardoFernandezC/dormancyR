% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_scenarios.R
\name{plot_scenarios}
\alias{plot_scenarios}
\title{Plot historic and future scenarios for climate-related metrics}
\usage{
plot_scenarios(
  scenario_list,
  metric,
  add_historic = TRUE,
  ...,
  outlier_shape = 19,
  historic_color = "white"
)
}
\arguments{
\item{scenario_list}{is a list of lists containing information and data about the scenarios to be plotted. These
lists must have:\itemize{

 \item{an element named \code{data}, which should be a list contain one or more named \code{data.frames} with a column
  named the same as the \code{metric} argument. This row must contain (\code{numeric}) information to be plotted.
  \code{data.frames} of climate-related metrics can be obtained with the 
  \code{\link[chillR:tempResponse_daily_list]{tempResponse_daily_list}} function. For
  past scenarios, the names of the dataframes can be the reference years used to generate the
  scenarios. These names will be recicled and used in the x-axis of the historic panel. For future 
  scenarios, the names of the dataframes can be the models used in the projections. These names
  will appear in the legend for future panels.}
 \item{an element named \code{caption} containing information about the scenario which the list
 is related to.}
 \item{an element named \code{historic_data} which represents a data frame for 
 actual observations in past scenarios.}
 \item{\code{time_series} is an optional argument that defines whether the scenario contains
 a time series.}
 \item{\code{labels} is an optional vector that usually contains the names of the elements used for
 \code{metric_summary} in \code{\link[chillR:make_climate_scenario]{make_climate_scenario}}.}}}

\item{metric}{is a character string corresponding to the name of the column that contains the data of interest
in the \code{data.frame} of the \code{scenario_list} (and, if applicable, in the
\code{historic_data}).}

\item{add_historic}{is a boolean parameter to define whether the plot should include the actual observations
of historic climated-related metrics.}

\item{...}{accepts arguments that can be passed to \code{\link[ggplot2:layer]{layer}} and are 
commonly used outside the aesthetic function for different geoms. Options can be \code{size}, 
\code{color}, among others.}

\item{outlier_shape}{is the optional shape to replace the outliers in the boxplots. To show no oultiers
use NA. See \code{\link[ggplot2:aes_linetype_size_shape]{shape}} for shape options.}

\item{historic_color}{is a character string corresponding to the color used to fill the boxplots in simulated
historic scenarios. Supported options are those provided by \code{\link[grDevices]{colors}}.}
}
\value{
A plot of classes \code{'patchwork'}, \code{'gg'}, and \code{'ggplot'}. This allows 
continue editing some features of the plots through the syntax (i.e. \code{'&'},
and \code{'+'}) from both libraries (see examples).

\figure{plot_scenarios_example.png}{options: align='bottom' width='100\%' alt='plot_scenarios example'}
}
\description{
Visualize outputs from the \code{\link[chillR:temperature_generation]{temperature_generation}} function used
in climate-related assessments. These outputs are usually compiled with the
\code{\link[chillR:make_climate_scenario]{make_climate_scenario}} function.
}
\details{
\code{Plot_scenarios} uses the \code{\link{ggplot2}} syntax for producing separated
plots for historic and future scenarios. Later, the plots are merged into one by using the
\code{\link{patchwork}} library.
}
\examples{

# Make 3 identical objects as scenarios; let's assume these represent the
# years 2000, 2005 and 2010.

library(chillR)

# Compute chill responses for KA_weather data

chill <- tempResponse(stack_hourly_temps(
                      fix_weather(KA_weather[which(KA_weather$Year > 2003), ]),
                      latitude = 50.4), Start_JDay = 305, End_JDay = 60)


# Simulated scenarios labels

past_labels <- c(2000, 2005, 2010)

# Models labels

models_labels <- c("Climate model 1", "Climate model 2",
                   "Climate model 3")

# Add named elements to past and future scenarios

scenario_results_past <- list(`2000` = chill,
                              `2005` = chill,
                              `2010` = chill)
                              
scenario_results_future <- list(`Climate model 1` = chill,
                                `Climate model 2` = chill,
                                `Climate model 3` = chill)

# Define the climate scenario  

climate_scenario_list <- list(list(data = scenario_results_past,
                                   caption = c("Historic", "data"),
                                   time_series = TRUE,
                                   labels = past_labels,
                                   historic_data = chill),
                              list(data = scenario_results_future,
                                   caption = c("Scenario", "1"),
                                   labels = models_labels),
                              list(data = scenario_results_future,
                                   caption = c("Scenario", "2"),
                                   labels = models_labels),
                              list(data = scenario_results_future,
                                   caption=c("Scenario", "3"),
                                   labels = models_labels))
                                   
# Plot the climate scenarios

plot_scenarios(climate_scenario_list, metric = 'Chill_Portions',
               add_historic = TRUE, size = 2, shape = 3, color = 'blue',
               outlier_shape = 12, historic_color = 'skyblue')

# Since the output is a ggplot object, it is possible to continue
# modifying some general aspects of the plot

plot <- plot_scenarios(climate_scenario_list, metric = 'Chill_Portions',
               add_historic = TRUE, size = 2, shape = 3, color = 'blue',
               outlier_shape = 12, historic_color = 'skyblue')
               
               
# Example to change the color of the GCM scale
 
plot & ggplot2::scale_fill_brewer(type = 'qual')

# Modify axis title and axis text

plot & ggplot2::theme(axis.title = ggplot2::element_text(size = 14,
                                                         family = 'serif'),
                      axis.text = ggplot2::element_text(face = 'bold',
                                                        color = 'blue'))
  
}
